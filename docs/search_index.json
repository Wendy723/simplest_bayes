[
["index.html", "Simplest Bayesian Example Welcome", " Simplest Bayesian Example Devin Pastoor Welcome An extremely simple example of modeling and postprocessing a bayesian dataset with nonmem "],
["dataset-creation.html", "1 Dataset Creation 1.1 Generate data for mrgsolve 1.2 Model Details 1.3 Distribution of peak and trough values 1.4 Predicted Profiles 1.5 Real world sampling and LLOQ 1.6 IPRED and DV vs TIME for all individuals at sampled times 1.7 Prepare for nonmem", " 1 Dataset Creation library(knitr) library(PKPDmisc) library(tidyverse) library(mrgsolve) source(&quot;../scripts/model_details.R&quot;) models &lt;- source(&quot;../models/models.R&quot;)$value #&gt; model dir set to C:/Users/devin/Documents/Repos/simplest_bayes/models #&gt; cache location set to C:\\Users\\devin\\Documents\\Repos\\simplest_bayes\\models\\.modelcache #&gt; Loading model from cache. 1.1 Generate data for mrgsolve start with a baseline of having 50 individuals worth of data, can scale to different amounts of individuals later NIDS &lt;- 50 demogs &lt;- data_frame(ID = 1:NIDS) for_dosing &lt;- demogs %&gt;% mutate( CMT = 1, EVID = 1, TIME = 0, AMT = 1000, RATE = 1000 ) one_cmt_iv &lt;- models$use(&quot;one_cmt_iv&quot;) 1.2 Model Details mrgsolve::see(one_cmt_iv) #&gt; #&gt; Model file: one_cmt_iv.cpp #&gt; [PARAM] @annotated #&gt; CL : 3 : Clearance (L/hr) #&gt; V : 35 : Volume (L) #&gt; #&gt; #&gt; [CMT] @annotated #&gt; CENT : Central compartment (mg) #&gt; #&gt; [PKMODEL] #&gt; ncmt=1, trans=11 #&gt; #&gt; [MAIN] #&gt; double CLi = CL*exp(nCL); #&gt; double Vi = V*exp(nV); #&gt; #&gt; #&gt; [OMEGA] @annotated @correlation @block #&gt; nCL : 0.1 : Random effect on CL #&gt; nV : 0.4 0.04 : Random effect on V #&gt; #&gt; [SIGMA] @annotated #&gt; PROP : 0.04 : Proportional error #&gt; // so don&#39;t get into issues with estimating via multiplicative error only #&gt; ADD : 0.1 : Additive residual error #&gt; #&gt; [TABLE] #&gt; double IPRED = CENT/Vi; #&gt; double DV = CENT/Vi*(1+PROP) + ADD; #&gt; #&gt; [CAPTURE] @annotated #&gt; DV : plasma concentration (mg/L) #&gt; IPRED : Individual predicted plasma concentration (mg/L) #&gt; CLi : Individual Clearance (L/hr) #&gt; Vi : Individual Volume (L) one_cmt_iv %&gt;% model_details %&gt;% filter(block != &quot;CAPTURE&quot;) %&gt;% kable() block name descr unit options value PARAM CL Clearance L/hr . 3.00 PARAM V Volume L . 35.00 CMT CENT Central compartment mg . 0.00 OMEGA nCL Random effect on CL . . 0.10 OMEGA nV Random effect on V . . 0.04 SIGMA PROP Proportional error . . 0.04 SIGMA ADD Additive residual error . . 0.10 simulated_data &lt;- one_cmt_iv %&gt;% data_set(for_dosing) %&gt;% mrgsim(end = 24, delta = 0.25) %&gt;% as_data_frame 1.3 Distribution of peak and trough values ‘peak’ defined as 1 hr post infusion and trough 1 hour prior to when next dose would begin simulated_data %&gt;% filter(TIME %in% c(2, 23)) %&gt;% mutate(DV = ifelse(DV &lt; 0, 0, DV)) %&gt;% select(ID, DV) %&gt;% group_by(ID) %&gt;% summarize_all(funs(min, max)) %&gt;% gather(sample, value, -ID) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_wrap(~sample, scales = &quot;free&quot;) + theme_bw() + base_theme() 1.4 Predicted Profiles simulated_data %&gt;% filter(IPRED &gt; 0.1) %&gt;% ggplot(aes(x = TIME, y = IPRED, group = ID)) + geom_line(size = 1.05, alpha = 0.8) + theme_bw() + base_theme() + scale_y_log10() 1.5 Real world sampling and LLOQ sample_times &lt;- c(2, 4, 8, 16, 24) LLOQ &lt;- 0.1 sampled_data &lt;- simulated_data %&gt;% filter(TIME %in% sample_times, DV &gt; LLOQ) Show which, if any, timepoints have bql values and determine percent bql sampled_data %&gt;% count(TIME) %&gt;% mutate(baseline = first(n), perc_bql = 100 - n/baseline*100) %&gt;% filter(perc_bql &gt; 0) %&gt;% select(TIME, perc_bql) %&gt;% kable() TIME perc_bql —– ——— 1.6 IPRED and DV vs TIME for all individuals at sampled times list_plots &lt;- sampled_data %&gt;% mutate(PNUM = ids_per_plot(ID)) %&gt;% split(.$PNUM) %&gt;% map(~ ggplot(., aes(x = TIME, y = IPRED, group = ID)) + geom_point(aes(y = DV), color = &quot;blue&quot;) + geom_line(size = 1.05, alpha = 0.8) + theme_bw() + base_theme() + facet_wrap(~ID) + scale_y_log10() ) print_plots(list_plots) #&gt; [[1]] #&gt; NULL #&gt; #&gt; [[2]] #&gt; NULL #&gt; #&gt; [[3]] #&gt; NULL #&gt; #&gt; [[4]] #&gt; NULL #&gt; #&gt; [[5]] #&gt; NULL #&gt; #&gt; [[6]] #&gt; NULL 1.7 Prepare for nonmem nm_dat &lt;- sampled_data %&gt;% select(ID, TIME, DV) %&gt;% mutate(CMT = 1, EVID = 0 ) %&gt;% bind_rows(for_dosing) %&gt;% arrange(ID, TIME, desc(EVID)) kable(head(nm_dat)) ID TIME DV CMT EVID AMT RATE 1 0 NA 1 1 1000 1000 1 2 22.40 1 0 NA NA 1 4 18.59 1 0 NA NA 1 8 7.88 1 0 NA NA 1 16 10.20 1 0 NA NA 1 24 2.70 1 0 NA NA write_nonmem(nm_dat, &quot;../modeling/mdata/simple_nocovar_50id_6tp.csv&quot;) session_details &lt;- devtools::session_info() session_details$platform #&gt; setting value #&gt; version R version 3.3.2 (2016-10-31) #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; tz America/New_York #&gt; date 2016-12-09 knitr::kable(session_details$packages) package * version date source assertthat 0.1 2013-12-06 CRAN (R 3.3.2) backports 1.0.4 2016-10-24 CRAN (R 3.3.2) bookdown 0.2 2016-11-12 CRAN (R 3.3.2) codetools 0.2-15 2016-10-05 CRAN (R 3.3.2) colorspace 1.2-7 2016-10-11 CRAN (R 3.3.2) DBI 0.5-1 2016-09-10 CRAN (R 3.3.2) devtools 1.12.0 2016-06-24 CRAN (R 3.3.2) digest 0.6.10 2016-08-02 CRAN (R 3.3.2) dplyr * 0.5.0 2016-06-24 CRAN (R 3.3.2) evaluate 0.10 2016-10-11 CRAN (R 3.3.2) ggplot2 * 2.1.0.9001 2016-11-07 Github (hadley/ggplot2@70c3d69) gtable 0.2.0 2016-02-26 CRAN (R 3.3.2) highr 0.6 2016-05-09 CRAN (R 3.3.2) htmltools 0.3.5 2016-03-21 CRAN (R 3.3.2) httpuv 1.3.3 2015-08-04 CRAN (R 3.3.2) knitr * 1.15 2016-11-09 CRAN (R 3.3.2) labeling 0.3 2014-08-23 CRAN (R 3.3.2) lazyeval 0.2.0 2016-06-12 CRAN (R 3.3.2) magrittr 1.5 2014-11-22 CRAN (R 3.3.2) memoise 1.0.0 2016-01-29 CRAN (R 3.3.2) mime 0.5 2016-07-07 CRAN (R 3.3.2) miniUI 0.1.1 2016-01-15 CRAN (R 3.3.2) mrgsolve * 0.7.6.9029 2016-12-06 Github (metrumresearchgroup/mrgsolve@d92f31a) munsell 0.4.3 2016-02-13 CRAN (R 3.3.2) overseer * 0.0.1 2016-12-06 local PKPDmisc * 0.4.4.9000 2016-11-02 Github (dpastoor/PKPDmisc@beae2a6) plyr 1.8.4 2016-06-08 CRAN (R 3.3.2) purrr * 0.2.2 2016-06-18 CRAN (R 3.3.2) R6 2.2.0 2016-10-05 CRAN (R 3.3.2) Rcpp 0.12.8 2016-11-17 CRAN (R 3.3.2) RcppArmadillo 0.7.500.0.0 2016-10-22 CRAN (R 3.3.2) readr * 1.0.0 2016-08-03 CRAN (R 3.3.2) rmarkdown 1.2 2016-11-21 CRAN (R 3.3.2) rprojroot 1.1 2016-10-29 CRAN (R 3.3.2) scales 0.4.0.9003 2016-11-07 Github (hadley/scales@d58d83a) shiny 0.14.2 2016-11-01 CRAN (R 3.3.2) stringi 1.1.2 2016-10-01 CRAN (R 3.3.2) stringr 1.1.0 2016-08-19 CRAN (R 3.3.2) tibble * 1.2 2016-08-26 CRAN (R 3.3.2) tidyr * 0.6.0 2016-08-12 CRAN (R 3.3.2) tidyverse * 1.0.0 2016-09-09 CRAN (R 3.3.2) withr 1.0.2 2016-06-20 CRAN (R 3.3.2) xtable 1.8-2 2016-02-05 CRAN (R 3.3.2) yaml 2.1.13 2014-06-12 CRAN (R 3.3.2) "],
["nonmem-output.html", "2 NONMEM output 2.1 FOCE output", " 2 NONMEM output 2.1 FOCE output library(knitr) library(PKPDmisc) library(tidyverse) library(decorator) pallete &lt;- Pallete$new(&quot;material_design&quot;) mcp &lt;- pallete$colors() sdtab1 &lt;- read_nonmem(&quot;../modeling/sdtab001&quot;) patab1 &lt;- read_nonmem(&quot;../modeling/patab001&quot;) 2.1.1 Output previews kable(head(sdtab1)) ID TIME IPRED DV CWRES PRED 1 0 0.00 0.00 0.000 0.00 1 2 24.88 24.96 0.039 22.94 1 4 21.79 24.87 0.750 19.17 1 8 16.70 16.14 0.073 13.39 1 16 9.81 11.03 0.912 6.53 1 24 5.77 6.33 0.783 3.18 kable(head(patab1)) ID CL V TVCL TVV nCL nV 1 2.42 36.4 3.42 38.1 -0.347 -0.047 2 2.99 43.2 3.42 38.1 -0.135 0.126 3 4.20 47.1 3.42 38.1 0.204 0.211 4 3.50 30.8 3.42 38.1 0.024 -0.213 5 5.55 45.9 3.42 38.1 0.484 0.185 6 2.82 38.0 3.42 38.1 -0.195 -0.003 2.1.2 Visual summaries 2.1.2.1 Parameter values patab1 %&gt;% select(ID:TVV) %&gt;% gather(iparam, value, CL, V) %&gt;% mutate(TVP = ifelse(iparam == &quot;CL&quot;, TVCL, TVV)) %&gt;% ggplot(aes(x = value, group = iparam)) + geom_density() + geom_vline(aes(xintercept = TVP), color = mcp$blue, size = 1.2) + facet_wrap(~iparam, scales = &quot;free&quot;) + theme_bw() + base_theme() + labs(x = &quot;Individual parameter value&quot;, subtitle=&quot;blue lines represent population typical value&quot;) 2.1.2.2 Individual diagnostic plots sdtab1 %&gt;% filter(TIME &gt;0) %&gt;% ggplot(aes(x = TIME, y = CWRES)) + geom_point() + geom_smooth(se = FALSE, color = mcp$blue) + theme_bw() + base_theme() + geom_smooth(aes(y = abs(CWRES)), se = F, color = mcp$red) + geom_smooth(aes(y = -abs(CWRES)), se = F, color = mcp$red) #&gt; `geom_smooth()` using method = &#39;loess&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; sdtab1 %&gt;% ggplot(aes(x = IPRED, y = DV)) + geom_abline(color = mcp$blue, size = 1.1) + geom_point() + theme_bw() + base_theme() + labs(x = &quot;Individual Predicted Concentration (mg/L)&quot;, y = &quot;Observed Concentration (mg/L)&quot;) plot_list &lt;- sdtab1 %&gt;% mutate(PNUM = ids_per_plot(ID)) %&gt;% split(.$PNUM) %&gt;% map(~ ggplot(., aes(x = TIME, y = IPRED, group = ID)) + geom_line(size = 1.1) + geom_line(aes(y = PRED), size = 1.1, color = mcp$blue) + geom_point(aes(y = DV), size = 2.5) + facet_wrap(~ID) + theme_bw() + base_theme() + labs(y = &quot;Population, Individual Predicted and Observed Concentrations (mg/L)&quot;, x = &quot;Time (hours)&quot;, subtitle = &quot;blue line = population predicted&quot; ) + scale_y_log10(breaks = c(1, 5, 10, 20, ceiling(max(.$DV)/10)*10)) ) print_plots(plot_list) #&gt; [[1]] #&gt; NULL #&gt; #&gt; [[2]] #&gt; NULL #&gt; #&gt; [[3]] #&gt; NULL #&gt; #&gt; [[4]] #&gt; NULL #&gt; #&gt; [[5]] #&gt; NULL #&gt; #&gt; [[6]] #&gt; NULL session_details &lt;- devtools::session_info() session_details$platform #&gt; setting value #&gt; version R version 3.3.2 (2016-10-31) #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; tz America/New_York #&gt; date 2016-12-09 knitr::kable(session_details$packages) package * version date source assertthat 0.1 2013-12-06 CRAN (R 3.3.2) backports 1.0.4 2016-10-24 CRAN (R 3.3.2) bookdown 0.2 2016-11-12 CRAN (R 3.3.2) codetools 0.2-15 2016-10-05 CRAN (R 3.3.2) colorspace 1.2-7 2016-10-11 CRAN (R 3.3.2) DBI 0.5-1 2016-09-10 CRAN (R 3.3.2) decorator * 0.0.1 2016-12-09 local devtools 1.12.0 2016-06-24 CRAN (R 3.3.2) digest 0.6.10 2016-08-02 CRAN (R 3.3.2) dplyr * 0.5.0 2016-06-24 CRAN (R 3.3.2) evaluate 0.10 2016-10-11 CRAN (R 3.3.2) ggplot2 * 2.1.0.9001 2016-11-07 Github (hadley/ggplot2@70c3d69) gtable 0.2.0 2016-02-26 CRAN (R 3.3.2) highr 0.6 2016-05-09 CRAN (R 3.3.2) htmltools 0.3.5 2016-03-21 CRAN (R 3.3.2) httpuv 1.3.3 2015-08-04 CRAN (R 3.3.2) knitr * 1.15 2016-11-09 CRAN (R 3.3.2) labeling 0.3 2014-08-23 CRAN (R 3.3.2) lazyeval 0.2.0 2016-06-12 CRAN (R 3.3.2) magrittr 1.5 2014-11-22 CRAN (R 3.3.2) memoise 1.0.0 2016-01-29 CRAN (R 3.3.2) mime 0.5 2016-07-07 CRAN (R 3.3.2) miniUI 0.1.1 2016-01-15 CRAN (R 3.3.2) munsell 0.4.3 2016-02-13 CRAN (R 3.3.2) PKPDmisc * 0.4.4.9000 2016-11-02 Github (dpastoor/PKPDmisc@beae2a6) plyr 1.8.4 2016-06-08 CRAN (R 3.3.2) purrr * 0.2.2 2016-06-18 CRAN (R 3.3.2) R6 2.2.0 2016-10-05 CRAN (R 3.3.2) Rcpp 0.12.8 2016-11-17 CRAN (R 3.3.2) readr * 1.0.0 2016-08-03 CRAN (R 3.3.2) rmarkdown 1.2 2016-11-21 CRAN (R 3.3.2) rprojroot 1.1 2016-10-29 CRAN (R 3.3.2) scales 0.4.0.9003 2016-11-07 Github (hadley/scales@d58d83a) shiny 0.14.2 2016-11-01 CRAN (R 3.3.2) stringi 1.1.2 2016-10-01 CRAN (R 3.3.2) stringr 1.1.0 2016-08-19 CRAN (R 3.3.2) tibble * 1.2 2016-08-26 CRAN (R 3.3.2) tidyr * 0.6.0 2016-08-12 CRAN (R 3.3.2) tidyverse * 1.0.0 2016-09-09 CRAN (R 3.3.2) withr 1.0.2 2016-06-20 CRAN (R 3.3.2) xtable 1.8-2 2016-02-05 CRAN (R 3.3.2) yaml 2.1.13 2014-06-12 CRAN (R 3.3.2) "]
]
