[
["index.html", "Simplest Bayesian Example Welcome", " Simplest Bayesian Example Devin Pastoor Welcome An extremely simple example of modeling and postprocessing a bayesian dataset with nonmem "],
["dataset-creation.html", "1 Dataset Creation 1.1 Generate data for mrgsolve 1.2 Model Details 1.3 Distribution of peak and trough values 1.4 Predicted Profiles 1.5 Real world sampling and LLOQ 1.6 IPRED and DV vs TIME for all individuals at sampled times 1.7 Prepare for nonmem", " 1 Dataset Creation library(knitr) library(PKPDmisc) library(tidyverse) library(mrgsolve) source(&quot;../scripts/model_details.R&quot;) models &lt;- source(&quot;../models/models.R&quot;)$value #&gt; model dir set to C:/Users/devin/Documents/Repos/simplest_bayes/models #&gt; cache location set to C:\\Users\\devin\\Documents\\Repos\\simplest_bayes\\models\\.modelcache #&gt; Loading model from cache. 1.1 Generate data for mrgsolve start with a baseline of having 50 individuals worth of data, can scale to different amounts of individuals later NIDS &lt;- 50 demogs &lt;- data_frame(ID = 1:NIDS) for_dosing &lt;- demogs %&gt;% mutate( CMT = 1, EVID = 1, TIME = 0, AMT = 1000, RATE = 1000 ) one_cmt_iv &lt;- models$use(&quot;one_cmt_iv&quot;) 1.2 Model Details mrgsolve::see(one_cmt_iv) #&gt; #&gt; Model file: one_cmt_iv.cpp #&gt; [PARAM] @annotated #&gt; CL : 3 : Clearance (L/hr) #&gt; V : 35 : Volume (L) #&gt; #&gt; #&gt; [CMT] @annotated #&gt; CENT : Central compartment (mg) #&gt; #&gt; [PKMODEL] #&gt; ncmt=1, trans=11 #&gt; #&gt; [MAIN] #&gt; double CLi = CL*exp(nCL); #&gt; double Vi = V*exp(nV); #&gt; #&gt; #&gt; [OMEGA] @annotated @correlation @block #&gt; nCL : 0.1 : Random effect on CL #&gt; nV : 0.4 0.04 : Random effect on V #&gt; #&gt; [SIGMA] @annotated #&gt; PROP : 0.04 : Proportional error #&gt; // so don&#39;t get into issues with estimating via multiplicative error only #&gt; ADD : 0.1 : Additive residual error #&gt; #&gt; [TABLE] #&gt; double IPRED = CENT/Vi; #&gt; double DV = CENT/Vi*(1+PROP) + ADD; #&gt; #&gt; [CAPTURE] @annotated #&gt; DV : plasma concentration (mg/L) #&gt; IPRED : Individual predicted plasma concentration (mg/L) #&gt; CLi : Individual Clearance (L/hr) #&gt; Vi : Individual Volume (L) one_cmt_iv %&gt;% model_details %&gt;% filter(block != &quot;CAPTURE&quot;) %&gt;% kable() block name descr unit options value PARAM CL Clearance L/hr . 3.00 PARAM V Volume L . 35.00 CMT CENT Central compartment mg . 0.00 OMEGA nCL Random effect on CL . . 0.10 OMEGA nV Random effect on V . . 0.04 SIGMA PROP Proportional error . . 0.04 SIGMA ADD Additive residual error . . 0.10 simulated_data &lt;- one_cmt_iv %&gt;% data_set(for_dosing) %&gt;% mrgsim(end = 24, delta = 0.25) %&gt;% as_data_frame 1.3 Distribution of peak and trough values ‘peak’ defined as 1 hr post infusion and trough 1 hour prior to when next dose would begin simulated_data %&gt;% filter(TIME %in% c(2, 23)) %&gt;% mutate(DV = ifelse(DV &lt; 0, 0, DV)) %&gt;% select(ID, DV) %&gt;% group_by(ID) %&gt;% summarize_all(funs(min, max)) %&gt;% gather(sample, value, -ID) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_wrap(~sample, scales = &quot;free&quot;) + theme_bw() + base_theme() 1.4 Predicted Profiles simulated_data %&gt;% filter(IPRED &gt; 0.1) %&gt;% ggplot(aes(x = TIME, y = IPRED, group = ID)) + geom_line(size = 1.05, alpha = 0.8) + theme_bw() + base_theme() + scale_y_log10() 1.5 Real world sampling and LLOQ sample_times &lt;- c(2, 4, 8, 16, 24) LLOQ &lt;- 0.1 sampled_data &lt;- simulated_data %&gt;% filter(TIME %in% sample_times, DV &gt; LLOQ) Show which, if any, timepoints have bql values and determine percent bql sampled_data %&gt;% count(TIME) %&gt;% mutate(baseline = first(n), perc_bql = 100 - n/baseline*100) %&gt;% filter(perc_bql &gt; 0) %&gt;% select(TIME, perc_bql) %&gt;% knitr::kable() TIME perc_bql —– ——— 1.6 IPRED and DV vs TIME for all individuals at sampled times list_plots &lt;- sampled_data %&gt;% mutate(PNUM = ids_per_plot(ID)) %&gt;% split(.$PNUM) %&gt;% map(~ ggplot(., aes(x = TIME, y = IPRED, group = ID)) + geom_point(aes(y = DV), color = &quot;blue&quot;) + geom_line(size = 1.05, alpha = 0.8) + theme_bw() + base_theme() + facet_wrap(~ID) + scale_y_log10() ) print_plots(list_plots) #&gt; [[1]] #&gt; NULL #&gt; #&gt; [[2]] #&gt; NULL #&gt; #&gt; [[3]] #&gt; NULL #&gt; #&gt; [[4]] #&gt; NULL #&gt; #&gt; [[5]] #&gt; NULL #&gt; #&gt; [[6]] #&gt; NULL 1.7 Prepare for nonmem nm_dat &lt;- sampled_data %&gt;% select(ID, TIME, DV) %&gt;% mutate(CMT = 1, EVID = 0 ) %&gt;% bind_rows(for_dosing) %&gt;% arrange(ID, TIME, desc(EVID)) kable(head(nm_dat)) ID TIME DV CMT EVID AMT RATE 1 0 NA 1 1 1000 1000 1 2 22.40 1 0 NA NA 1 4 18.59 1 0 NA NA 1 8 7.88 1 0 NA NA 1 16 10.20 1 0 NA NA 1 24 2.70 1 0 NA NA write_nonmem(nm_dat, &quot;../modeling/mdata/simple_nocovar_50id_6tp.csv&quot;) session_details &lt;- devtools::session_info() session_details$platform #&gt; setting value #&gt; version R version 3.3.2 (2016-10-31) #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; tz America/New_York #&gt; date 2016-12-12 knitr::kable(session_details$packages) package * version date source backports 1.0.4 2016-10-24 CRAN (R 3.3.2) bookdown 0.2 2016-11-12 CRAN (R 3.3.2) devtools 1.12.0 2016-06-24 CRAN (R 3.3.2) digest 0.6.10 2016-08-02 CRAN (R 3.3.2) evaluate 0.10 2016-10-11 CRAN (R 3.3.2) htmltools 0.3.5 2016-03-21 CRAN (R 3.3.2) httpuv 1.3.3 2015-08-04 CRAN (R 3.3.2) knitr 1.15 2016-11-09 CRAN (R 3.3.2) magrittr 1.5 2014-11-22 CRAN (R 3.3.2) memoise 1.0.0 2016-01-29 CRAN (R 3.3.2) mime 0.5 2016-07-07 CRAN (R 3.3.2) miniUI 0.1.1 2016-01-15 CRAN (R 3.3.2) R6 2.2.0 2016-10-05 CRAN (R 3.3.2) Rcpp 0.12.8 2016-11-17 CRAN (R 3.3.2) rmarkdown 1.2 2016-11-21 CRAN (R 3.3.2) rprojroot 1.1 2016-10-29 CRAN (R 3.3.2) shiny 0.14.2 2016-11-01 CRAN (R 3.3.2) stringi 1.1.2 2016-10-01 CRAN (R 3.3.2) stringr 1.1.0 2016-08-19 CRAN (R 3.3.2) withr 1.0.2 2016-06-20 CRAN (R 3.3.2) xtable 1.8-2 2016-02-05 CRAN (R 3.3.2) yaml 2.1.13 2014-06-12 CRAN (R 3.3.2) "],
["foce-analysis.html", "2 FOCE Analysis", " 2 FOCE Analysis library(knitr) library(PKPDmisc) library(tidyverse) library(decorator) pallete &lt;- Pallete$new(&quot;material_design&quot;) mcp &lt;- pallete$colors() sdtab1 &lt;- read_nonmem(&quot;../modeling/sdtab001&quot;) patab1 &lt;- read_nonmem(&quot;../modeling/patab001&quot;) sdtab2 &lt;- read_nonmem(&quot;../modeling/sdtab002&quot;) patab2 &lt;- read_nonmem(&quot;../modeling/patab002&quot;) 2.0.1 Output previews kable(head(sdtab1)) ID TIME IPRED DV CWRES PRED 1 0 0.00 0.00 0.000 0.00 1 2 24.88 24.96 0.039 22.94 1 4 21.79 24.87 0.750 19.17 1 8 16.70 16.14 0.073 13.39 1 16 9.81 11.03 0.912 6.53 1 24 5.77 6.33 0.783 3.18 kable(head(patab1)) ID CL V TVCL TVV nCL nV 1 2.42 36.4 3.42 38.1 -0.347 -0.047 2 2.99 43.2 3.42 38.1 -0.135 0.126 3 4.20 47.1 3.42 38.1 0.204 0.211 4 3.50 30.8 3.42 38.1 0.024 -0.213 5 5.55 45.9 3.42 38.1 0.484 0.185 6 2.82 38.0 3.42 38.1 -0.195 -0.003 2.0.2 Visual summaries 2.0.2.1 Parameter values patab1 %&gt;% select(ID:TVV) %&gt;% gather(iparam, value, CL, V) %&gt;% mutate(TVP = ifelse(iparam == &quot;CL&quot;, TVCL, TVV)) %&gt;% ggplot(aes(x = value, group = iparam)) + geom_density() + geom_vline(aes(xintercept = TVP), color = mcp$blue, size = 1.2) + facet_wrap(~iparam, scales = &quot;free&quot;) + theme_bw() + base_theme() + labs(x = &quot;Individual parameter value&quot;, subtitle=&quot;blue lines represent population typical value&quot;) 2.0.2.2 Individual diagnostic plots sdtab1 %&gt;% filter(TIME &gt;0) %&gt;% ggplot(aes(x = TIME, y = CWRES)) + geom_point() + geom_smooth(se = FALSE, color = mcp$blue) + theme_bw() + base_theme() + geom_smooth(aes(y = abs(CWRES)), se = F, color = mcp$red) + geom_smooth(aes(y = -abs(CWRES)), se = F, color = mcp$red) #&gt; `geom_smooth()` using method = &#39;loess&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; #&gt; `geom_smooth()` using method = &#39;loess&#39; sdtab1 %&gt;% ggplot(aes(x = IPRED, y = DV)) + geom_abline(color = mcp$blue, size = 1.1) + geom_point() + theme_bw() + base_theme() + labs(x = &quot;Individual Predicted Concentration (mg/L)&quot;, y = &quot;Observed Concentration (mg/L)&quot;) plot_list &lt;- sdtab1 %&gt;% mutate(PNUM = ids_per_plot(ID)) %&gt;% split(.$PNUM) %&gt;% map(~ ggplot(., aes(x = TIME, y = IPRED, group = ID)) + geom_line(size = 1.1) + geom_line(aes(y = PRED), size = 1.1, color = mcp$blue) + geom_point(aes(y = DV), size = 2.5) + facet_wrap(~ID) + theme_bw() + base_theme() + labs(y = &quot;Population, Individual Predicted and Observed Concentrations (mg/L)&quot;, x = &quot;Time (hours)&quot;, subtitle = &quot;blue line = population predicted&quot; ) + scale_y_log10(breaks = c(1, 5, 10, 20, ceiling(max(.$DV)/10)*10)) ) print_plots(plot_list) #&gt; [[1]] #&gt; NULL #&gt; #&gt; [[2]] #&gt; NULL #&gt; #&gt; [[3]] #&gt; NULL #&gt; #&gt; [[4]] #&gt; NULL #&gt; #&gt; [[5]] #&gt; NULL #&gt; #&gt; [[6]] #&gt; NULL session_details &lt;- devtools::session_info() session_details$platform #&gt; setting value #&gt; version R version 3.3.2 (2016-10-31) #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; tz America/New_York #&gt; date 2016-12-12 knitr::kable(session_details$packages) package * version date source backports 1.0.4 2016-10-24 CRAN (R 3.3.2) bookdown 0.2 2016-11-12 CRAN (R 3.3.2) devtools 1.12.0 2016-06-24 CRAN (R 3.3.2) digest 0.6.10 2016-08-02 CRAN (R 3.3.2) evaluate 0.10 2016-10-11 CRAN (R 3.3.2) htmltools 0.3.5 2016-03-21 CRAN (R 3.3.2) httpuv 1.3.3 2015-08-04 CRAN (R 3.3.2) knitr 1.15 2016-11-09 CRAN (R 3.3.2) magrittr 1.5 2014-11-22 CRAN (R 3.3.2) memoise 1.0.0 2016-01-29 CRAN (R 3.3.2) mime 0.5 2016-07-07 CRAN (R 3.3.2) miniUI 0.1.1 2016-01-15 CRAN (R 3.3.2) R6 2.2.0 2016-10-05 CRAN (R 3.3.2) Rcpp 0.12.8 2016-11-17 CRAN (R 3.3.2) rmarkdown 1.2 2016-11-21 CRAN (R 3.3.2) rprojroot 1.1 2016-10-29 CRAN (R 3.3.2) shiny 0.14.2 2016-11-01 CRAN (R 3.3.2) stringi 1.1.2 2016-10-01 CRAN (R 3.3.2) stringr 1.1.0 2016-08-19 CRAN (R 3.3.2) withr 1.0.2 2016-06-20 CRAN (R 3.3.2) xtable 1.8-2 2016-02-05 CRAN (R 3.3.2) yaml 2.1.13 2014-06-12 CRAN (R 3.3.2) "],
["bayesian-analysis.html", "3 Bayesian analysis 3.1 Priors", " 3 Bayesian analysis library(PKPDmisc) library(data.table) library(tidyverse) library(knitr) library(infuser) Core differences Need priors on parameters EM algorithms can more robustly handle full block matrices as well as random effects on less well-defined parameters. 3.1 Priors Priors in nonmem may be defined in two ways: By distinguishing the thetas/omegas and their priors in $PRIOR NTHETA=number of Thetas to be estimated NETA=number of Etas to be estimated (and to be described by NETAxBETA OMEGA matrix) NTHP=number of thetas which have a prior NETP=number of Omegas with prior In our case we have 2 Thetas (TVCL, TVV) and 2 omegas (nCl, nV) $PRIOR NWPRI NTHETA=2 NETA=2, NTHP=2, NETP=2 Or the preferred way of distinguishing in the block definitions $THETA - fixed effects $OMEGA - random effects $SIGMA - residual error $THETAP - theta prior $THETAPV - variance of theta prior $OMEGAP - omega prior $OMEGAPD - degrees of freedom to prior omega matrix ** TODO: fill out explanations of each. ** "],
["bayesian-problems-and-solutions.html", "4 Bayesian Problems (and solutions) 4.1 Chains", " 4 Bayesian Problems (and solutions) Some of the problem areas in bayesian analysis techniques are ….. autocorrelation sensitivity to priors … 4.1 Chains Technique - a ‘master’ execution file can be used to generate new paramater values that can be used for multi-chain runs. NSAMPLE - sets number of preturbed parameter estimates, in this case 4 ISAMPLE - if subsequently estimating, will use the parameters generated from this sample by setting to 0 will not tweak these parameters $EST METHOD=CHAIN FILE=run003chains.chn NSAMPLE=4 ISAMPLE=0 DF=10 The larger the DF (degrees of freedom for randomly creating the OMEGAS) the smaller the difference between newly generated values. Eg, with DF=10000 almost no difference in values, whereas DF=5 will have 2x+ differences in values 4.1.0.1 example output comparing output from all chains ** TODO: add more instructions on what all is going on ** set.seed(1234567) modt &lt;- read_file(&quot;../modeling/run006c.modt&quot;) map(1:4, ~ write_file( infuse(modt, chain_number = ., seed = round(runif(1, 1000, 100000), 0)), file.path(&quot;..&quot;, &quot;modeling&quot;, paste0(&quot;run006c&quot;, ., &quot;.mod&quot;)))) #&gt; [[1]] #&gt; $PROB one cmpt simple mu modeled bayes #&gt; $SUB ADVAN1 TRANS2 #&gt; $INPUT ID TIME DV CMT EVID AMT RATE #&gt; $DATA mdata/simple_nocovar_50id_6tp.csv IGNORE=@ #&gt; $ABBR REPLACE THETA(CL, V) = THETA(1 to 2) #&gt; $ABBR REPLACE ETA(CL, V) = ETA(1 to 2) #&gt; #&gt; $THETAI #&gt; THETA(1:NTHETA)=LOG(THETAI(1:NTHETA)) #&gt; THETAP(1:NTHETAP)=LOG(THETAPI(1:NTHETAP)) #&gt; $THETAR #&gt; THETAR(1:NTHETA)=EXP(THETA(1:NTHETA)) #&gt; THETAPR(1:NTHETAP)=EXP(THETAP(1:NTHETAP)) #&gt; #&gt; $PRIOR NWPRI #&gt; #&gt; $PK #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; ; Request extra information for Bayesian analysis. #&gt; ; An extra call will then be made for accepted samples #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; #&gt; MU_1 = THETA(CL) #&gt; MU_2 = THETA(V) #&gt; CL = EXP(MU_1 + ETA(CL)) #&gt; V = EXP(MU_2 + ETA(V)) #&gt; S1 = V #&gt; #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 .AND. TIME==0.0) THEN #&gt; &quot;WRITE(50,98) ITER_REPORT,ID,CL,V #&gt; &quot;98 FORMAT(I12,1X,F14.0,4(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $ERROR #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; IPRED=F #&gt; Y = IPRED*(1 + ERR(1)) #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 ) THEN #&gt; &quot;WRITE(51,97) ITER_REPORT,ID,TIME,F #&gt; &quot;97 FORMAT(I12,1X,F14.0,2(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $THETA #&gt; (0.001, 3) ; TVCL #&gt; (0.001, 34) ; TVV #&gt; #&gt; $OMEGA BLOCK(2) #&gt; 0.1 ; nCL #&gt; 0.1 0.1 ; nV #&gt; #&gt; $SIGMA #&gt; 0.03 ; PROP #&gt; #&gt; ; THETA PRIORS #&gt; $THETAP (3 FIX) (34 FIX) #&gt; #&gt; ; THETA (uniformative) PRIORs #&gt; $THETAPV BLOCK(2) #&gt; 10000 FIX #&gt; 0.0 10000 #&gt; #&gt; $OMEGAP BLOCK(2) #&gt; 0.2 FIX #&gt; 0 0.2 #&gt; #&gt; ; degrees of freedom to prior omega matrix - low dof = highly uninformative #&gt; $OMEGAPD (2 FIX) #&gt; #&gt; $EST METHOD=CHAIN FILE=..\\run006chains.chn NSAMPLE=0 ISAMPLE=1 DF=20 #&gt; $EST METHOD=BAYES INTER NBURN=4000 NITER=10000 PRINT=20 NOPRIOR=0 CTYPE=3 CITER=10 SEED=56664 #&gt; #&gt; [[2]] #&gt; $PROB one cmpt simple mu modeled bayes #&gt; $SUB ADVAN1 TRANS2 #&gt; $INPUT ID TIME DV CMT EVID AMT RATE #&gt; $DATA mdata/simple_nocovar_50id_6tp.csv IGNORE=@ #&gt; $ABBR REPLACE THETA(CL, V) = THETA(1 to 2) #&gt; $ABBR REPLACE ETA(CL, V) = ETA(1 to 2) #&gt; #&gt; $THETAI #&gt; THETA(1:NTHETA)=LOG(THETAI(1:NTHETA)) #&gt; THETAP(1:NTHETAP)=LOG(THETAPI(1:NTHETAP)) #&gt; $THETAR #&gt; THETAR(1:NTHETA)=EXP(THETA(1:NTHETA)) #&gt; THETAPR(1:NTHETAP)=EXP(THETAP(1:NTHETAP)) #&gt; #&gt; $PRIOR NWPRI #&gt; #&gt; $PK #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; ; Request extra information for Bayesian analysis. #&gt; ; An extra call will then be made for accepted samples #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; #&gt; MU_1 = THETA(CL) #&gt; MU_2 = THETA(V) #&gt; CL = EXP(MU_1 + ETA(CL)) #&gt; V = EXP(MU_2 + ETA(V)) #&gt; S1 = V #&gt; #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 .AND. TIME==0.0) THEN #&gt; &quot;WRITE(50,98) ITER_REPORT,ID,CL,V #&gt; &quot;98 FORMAT(I12,1X,F14.0,4(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $ERROR #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; IPRED=F #&gt; Y = IPRED*(1 + ERR(1)) #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 ) THEN #&gt; &quot;WRITE(51,97) ITER_REPORT,ID,TIME,F #&gt; &quot;97 FORMAT(I12,1X,F14.0,2(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $THETA #&gt; (0.001, 3) ; TVCL #&gt; (0.001, 34) ; TVV #&gt; #&gt; $OMEGA BLOCK(2) #&gt; 0.1 ; nCL #&gt; 0.1 0.1 ; nV #&gt; #&gt; $SIGMA #&gt; 0.03 ; PROP #&gt; #&gt; ; THETA PRIORS #&gt; $THETAP (3 FIX) (34 FIX) #&gt; #&gt; ; THETA (uniformative) PRIORs #&gt; $THETAPV BLOCK(2) #&gt; 10000 FIX #&gt; 0.0 10000 #&gt; #&gt; $OMEGAP BLOCK(2) #&gt; 0.2 FIX #&gt; 0 0.2 #&gt; #&gt; ; degrees of freedom to prior omega matrix - low dof = highly uninformative #&gt; $OMEGAPD (2 FIX) #&gt; #&gt; $EST METHOD=CHAIN FILE=..\\run006chains.chn NSAMPLE=0 ISAMPLE=2 DF=20 #&gt; $EST METHOD=BAYES INTER NBURN=4000 NITER=10000 PRINT=20 NOPRIOR=0 CTYPE=3 CITER=10 SEED=72923 #&gt; #&gt; [[3]] #&gt; $PROB one cmpt simple mu modeled bayes #&gt; $SUB ADVAN1 TRANS2 #&gt; $INPUT ID TIME DV CMT EVID AMT RATE #&gt; $DATA mdata/simple_nocovar_50id_6tp.csv IGNORE=@ #&gt; $ABBR REPLACE THETA(CL, V) = THETA(1 to 2) #&gt; $ABBR REPLACE ETA(CL, V) = ETA(1 to 2) #&gt; #&gt; $THETAI #&gt; THETA(1:NTHETA)=LOG(THETAI(1:NTHETA)) #&gt; THETAP(1:NTHETAP)=LOG(THETAPI(1:NTHETAP)) #&gt; $THETAR #&gt; THETAR(1:NTHETA)=EXP(THETA(1:NTHETA)) #&gt; THETAPR(1:NTHETAP)=EXP(THETAP(1:NTHETAP)) #&gt; #&gt; $PRIOR NWPRI #&gt; #&gt; $PK #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; ; Request extra information for Bayesian analysis. #&gt; ; An extra call will then be made for accepted samples #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; #&gt; MU_1 = THETA(CL) #&gt; MU_2 = THETA(V) #&gt; CL = EXP(MU_1 + ETA(CL)) #&gt; V = EXP(MU_2 + ETA(V)) #&gt; S1 = V #&gt; #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 .AND. TIME==0.0) THEN #&gt; &quot;WRITE(50,98) ITER_REPORT,ID,CL,V #&gt; &quot;98 FORMAT(I12,1X,F14.0,4(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $ERROR #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; IPRED=F #&gt; Y = IPRED*(1 + ERR(1)) #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 ) THEN #&gt; &quot;WRITE(51,97) ITER_REPORT,ID,TIME,F #&gt; &quot;97 FORMAT(I12,1X,F14.0,2(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $THETA #&gt; (0.001, 3) ; TVCL #&gt; (0.001, 34) ; TVV #&gt; #&gt; $OMEGA BLOCK(2) #&gt; 0.1 ; nCL #&gt; 0.1 0.1 ; nV #&gt; #&gt; $SIGMA #&gt; 0.03 ; PROP #&gt; #&gt; ; THETA PRIORS #&gt; $THETAP (3 FIX) (34 FIX) #&gt; #&gt; ; THETA (uniformative) PRIORs #&gt; $THETAPV BLOCK(2) #&gt; 10000 FIX #&gt; 0.0 10000 #&gt; #&gt; $OMEGAP BLOCK(2) #&gt; 0.2 FIX #&gt; 0 0.2 #&gt; #&gt; ; degrees of freedom to prior omega matrix - low dof = highly uninformative #&gt; $OMEGAPD (2 FIX) #&gt; #&gt; $EST METHOD=CHAIN FILE=..\\run006chains.chn NSAMPLE=0 ISAMPLE=3 DF=20 #&gt; $EST METHOD=BAYES INTER NBURN=4000 NITER=10000 PRINT=20 NOPRIOR=0 CTYPE=3 CITER=10 SEED=91610 #&gt; #&gt; [[4]] #&gt; $PROB one cmpt simple mu modeled bayes #&gt; $SUB ADVAN1 TRANS2 #&gt; $INPUT ID TIME DV CMT EVID AMT RATE #&gt; $DATA mdata/simple_nocovar_50id_6tp.csv IGNORE=@ #&gt; $ABBR REPLACE THETA(CL, V) = THETA(1 to 2) #&gt; $ABBR REPLACE ETA(CL, V) = ETA(1 to 2) #&gt; #&gt; $THETAI #&gt; THETA(1:NTHETA)=LOG(THETAI(1:NTHETA)) #&gt; THETAP(1:NTHETAP)=LOG(THETAPI(1:NTHETAP)) #&gt; $THETAR #&gt; THETAR(1:NTHETA)=EXP(THETA(1:NTHETA)) #&gt; THETAPR(1:NTHETAP)=EXP(THETAP(1:NTHETAP)) #&gt; #&gt; $PRIOR NWPRI #&gt; #&gt; $PK #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; ; Request extra information for Bayesian analysis. #&gt; ; An extra call will then be made for accepted samples #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; #&gt; MU_1 = THETA(CL) #&gt; MU_2 = THETA(V) #&gt; CL = EXP(MU_1 + ETA(CL)) #&gt; V = EXP(MU_2 + ETA(V)) #&gt; S1 = V #&gt; #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 .AND. TIME==0.0) THEN #&gt; &quot;WRITE(50,98) ITER_REPORT,ID,CL,V #&gt; &quot;98 FORMAT(I12,1X,F14.0,4(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $ERROR #&gt; &quot;USE NMBAYES_INT, ONLY: ITER_REPORT,BAYES_EXTRA_REQUEST,BAYES_EXTRA #&gt; &quot;BAYES_EXTRA_REQUEST=1 #&gt; IPRED=F #&gt; Y = IPRED*(1 + ERR(1)) #&gt; &quot;IF(BAYES_EXTRA==1 .AND. ITER_REPORT&gt;=0 ) THEN #&gt; &quot;WRITE(51,97) ITER_REPORT,ID,TIME,F #&gt; &quot;97 FORMAT(I12,1X,F14.0,2(1X,1PG12.5)) #&gt; &quot;ENDIF #&gt; #&gt; $THETA #&gt; (0.001, 3) ; TVCL #&gt; (0.001, 34) ; TVV #&gt; #&gt; $OMEGA BLOCK(2) #&gt; 0.1 ; nCL #&gt; 0.1 0.1 ; nV #&gt; #&gt; $SIGMA #&gt; 0.03 ; PROP #&gt; #&gt; ; THETA PRIORS #&gt; $THETAP (3 FIX) (34 FIX) #&gt; #&gt; ; THETA (uniformative) PRIORs #&gt; $THETAPV BLOCK(2) #&gt; 10000 FIX #&gt; 0.0 10000 #&gt; #&gt; $OMEGAP BLOCK(2) #&gt; 0.2 FIX #&gt; 0 0.2 #&gt; #&gt; ; degrees of freedom to prior omega matrix - low dof = highly uninformative #&gt; $OMEGAPD (2 FIX) #&gt; #&gt; $EST METHOD=CHAIN FILE=..\\run006chains.chn NSAMPLE=0 ISAMPLE=4 DF=20 #&gt; $EST METHOD=BAYES INTER NBURN=4000 NITER=10000 PRINT=20 NOPRIOR=0 CTYPE=3 CITER=10 SEED=3940 r6c1 &lt;- fread(&quot;../modeling/run006c1.ext&quot;, skip = 1) %&gt;% mutate(chain = 1) r6c2 &lt;- fread(&quot;../modeling/run006c2.ext&quot;, skip = 1) %&gt;% mutate(chain = 2) r6c3 &lt;- fread(&quot;../modeling/run006c3.ext&quot;, skip = 1) %&gt;% mutate(chain = 3) r6c4 &lt;- fread(&quot;../modeling/run006c4.ext&quot;, skip = 1) %&gt;% mutate(chain = 4) r6_chains &lt;- bind_rows(r6c1, r6c2, r6c3) %&gt;% filter(ITERATION &gt; 0) %&gt;% rename(CL = THETA1, V = THETA2, EPS = `SIGMA(1,1)`, nCL = `OMEGA(1,1)`, nV = `OMEGA(2,2)`, nCL_nV = `OMEGA(2,1)`) kable(head(r6_chains)) ITERATION CL V EPS nCL nCL_nV nV MCMCOBJ chain 1 3.08 35.7 0.044 0.121 0.025 0.054 463 1 2 2.96 35.4 0.042 0.140 0.010 0.044 465 1 3 3.41 32.8 0.044 0.116 0.030 0.044 484 1 4 3.33 35.4 0.043 0.150 0.026 0.049 515 1 5 3.35 35.2 0.053 0.162 0.006 0.044 495 1 6 3.35 35.2 0.049 0.099 0.009 0.037 467 1 thin_by &lt;- function(df, .mod) { df %&gt;% filter(ITERATION %% .mod == 0) } r6_chains %&gt;% select(ITERATION:nV, chain) %&gt;% thin_by(10) %&gt;% gather(param, value, CL:nV) %&gt;% ggplot(aes(x = ITERATION, y = value, color = factor(chain)), alpha = 0.6) + geom_line() + facet_wrap(~param, ncol = 2, scales = &quot;free&quot;) + theme_bw() + base_theme() + scale_color_discrete(name = &quot;Chain&quot;) + theme(legend.position = &quot;bottom&quot;) session_details &lt;- devtools::session_info() session_details$platform #&gt; setting value #&gt; version R version 3.3.2 (2016-10-31) #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; tz America/New_York #&gt; date 2016-12-12 knitr::kable(session_details$packages) package * version date source backports 1.0.4 2016-10-24 CRAN (R 3.3.2) bookdown 0.2 2016-11-12 CRAN (R 3.3.2) devtools 1.12.0 2016-06-24 CRAN (R 3.3.2) digest 0.6.10 2016-08-02 CRAN (R 3.3.2) evaluate 0.10 2016-10-11 CRAN (R 3.3.2) htmltools 0.3.5 2016-03-21 CRAN (R 3.3.2) httpuv 1.3.3 2015-08-04 CRAN (R 3.3.2) knitr 1.15 2016-11-09 CRAN (R 3.3.2) magrittr 1.5 2014-11-22 CRAN (R 3.3.2) memoise 1.0.0 2016-01-29 CRAN (R 3.3.2) mime 0.5 2016-07-07 CRAN (R 3.3.2) miniUI 0.1.1 2016-01-15 CRAN (R 3.3.2) R6 2.2.0 2016-10-05 CRAN (R 3.3.2) Rcpp 0.12.8 2016-11-17 CRAN (R 3.3.2) rmarkdown 1.2 2016-11-21 CRAN (R 3.3.2) rprojroot 1.1 2016-10-29 CRAN (R 3.3.2) shiny 0.14.2 2016-11-01 CRAN (R 3.3.2) stringi 1.1.2 2016-10-01 CRAN (R 3.3.2) stringr 1.1.0 2016-08-19 CRAN (R 3.3.2) withr 1.0.2 2016-06-20 CRAN (R 3.3.2) xtable 1.8-2 2016-02-05 CRAN (R 3.3.2) yaml 2.1.13 2014-06-12 CRAN (R 3.3.2) "],
["dataset-creation-1.html", "5 Dataset Creation 5.1 Generate data for mrgsolve 5.2 Model Details 5.3 Distribution of peak and trough values 5.4 Predicted Profiles 5.5 Real world sampling and LLOQ 5.6 IPRED and DV vs TIME for all individuals at sampled times 5.7 Prepare for nonmem 5.8 Create chains 5.9 output data", " 5 Dataset Creation library(knitr) library(PKPDmisc) library(tidyverse) library(mrgsolve) library(infuser) source(&quot;../scripts/model_details.R&quot;) models &lt;- source(&quot;../models/models.R&quot;)$value #&gt; model dir set to C:/Users/devin/Documents/Repos/simplest_bayes/models #&gt; cache location set to C:\\Users\\devin\\Documents\\Repos\\simplest_bayes\\models\\.modelcache #&gt; Loading model from cache. 5.1 Generate data for mrgsolve start with a baseline of having 50 individuals worth of data, can scale to different amounts of individuals later NIDS &lt;- 56 demogs &lt;- data_frame(ID = 1:NIDS) for_dosing &lt;- demogs %&gt;% mutate( CMT = 1, EVID = 1, TIME = 0, AMT = 1000, RATE = 1000, ADDL = 1, II = 12, OBSNUM = 0 ) one_cmt_iv &lt;- models$use(&quot;one_cmt_iv&quot;) 5.2 Model Details mrgsolve::see(one_cmt_iv) #&gt; #&gt; Model file: one_cmt_iv.cpp #&gt; [PARAM] @annotated #&gt; CL : 3 : Clearance (L/hr) #&gt; V : 35 : Volume (L) #&gt; #&gt; #&gt; [CMT] @annotated #&gt; CENT : Central compartment (mg) #&gt; #&gt; [PKMODEL] #&gt; ncmt=1, trans=11 #&gt; #&gt; [MAIN] #&gt; double CLi = CL*exp(nCL); #&gt; double Vi = V*exp(nV); #&gt; #&gt; #&gt; [OMEGA] @annotated @correlation @block #&gt; nCL : 0.1 : Random effect on CL #&gt; nV : 0.4 0.04 : Random effect on V #&gt; #&gt; [SIGMA] @annotated #&gt; PROP : 0.04 : Proportional error #&gt; // so don&#39;t get into issues with estimating via multiplicative error only #&gt; ADD : 0.1 : Additive residual error #&gt; #&gt; [TABLE] #&gt; double IPRED = CENT/Vi; #&gt; double DV = CENT/Vi*(1+PROP) + ADD; #&gt; #&gt; [CAPTURE] @annotated #&gt; DV : plasma concentration (mg/L) #&gt; IPRED : Individual predicted plasma concentration (mg/L) #&gt; CLi : Individual Clearance (L/hr) #&gt; Vi : Individual Volume (L) one_cmt_iv %&gt;% model_details %&gt;% filter(block != &quot;CAPTURE&quot;) %&gt;% kable() block name descr unit options value PARAM CL Clearance L/hr . 3.00 PARAM V Volume L . 35.00 CMT CENT Central compartment mg . 0.00 OMEGA nCL Random effect on CL . . 0.10 OMEGA nV Random effect on V . . 0.04 SIGMA PROP Proportional error . . 0.04 SIGMA ADD Additive residual error . . 0.10 simulated_data &lt;- one_cmt_iv %&gt;% data_set(for_dosing) %&gt;% mrgsim(end = 36, delta = 0.25) %&gt;% as_data_frame 5.3 Distribution of peak and trough values ‘peak’ defined as 1 hr post infusion and trough 1 hour prior to when next dose would begin simulated_data %&gt;% filter(TIME %in% c(2, 11)) %&gt;% mutate(DV = ifelse(DV &lt; 0, 0, DV)) %&gt;% select(ID, DV) %&gt;% group_by(ID) %&gt;% summarize_all(funs(min, max)) %&gt;% gather(sample, value, -ID) %&gt;% ggplot(aes(x = value)) + geom_density() + facet_wrap(~sample, scales = &quot;free&quot;) + theme_bw() + base_theme() 5.4 Predicted Profiles simulated_data %&gt;% filter(IPRED &gt; 0.1) %&gt;% ggplot(aes(x = TIME, y = IPRED, group = ID)) + geom_line(size = 1.05, alpha = 0.8) + theme_bw() + base_theme() + scale_y_log10(breaks = c(0.1, 1, 10, 20, 30, 40)) 5.5 Real world sampling and LLOQ sample_times_rich &lt;- c(2, 6, 11, 14, 18, 23) LLOQ &lt;- 0.1 sampled_data_rich2d &lt;- simulated_data %&gt;% filter(TIME %in% sample_times_rich, DV &gt; LLOQ) %&gt;% group_by(ID) %&gt;% mutate(OBSNUM = dplyr::row_number(ID)) sparser_scenarios &lt;- list( &quot;s2d&quot; = c(1, 3, 4, 6), &quot;s1dpt&quot; = c(1, 3, 6), &quot;r1d&quot; = c(1, 2, 3), &quot;s2trough&quot; = c(3, 6), &quot;s1d&quot; = c(1, 3), &quot;tr&quot; = c(3) ) sparser_scenario_data &lt;- map(names(sparser_scenarios), function(scenario) { res &lt;- sampled_data_rich2d %&gt;% filter(OBSNUM %in% sparser_scenarios[[scenario]]) return(setNames(res, scenario)) }) 5.6 IPRED and DV vs TIME for all individuals at sampled times list_plots_rich &lt;- simulated_data %&gt;% select(-DV) %&gt;% left_join(sampled_data_rich2d %&gt;% select(ID, TIME, DV)) %&gt;% mutate(PNUM = ids_per_plot(ID)) %&gt;% split(.$PNUM) %&gt;% map(~ ggplot(., aes(x = TIME, y = IPRED, group = ID)) + geom_point(aes(y = DV), color = &quot;blue&quot;) + geom_line(size = 1.05, alpha = 0.8) + theme_bw() + base_theme() + facet_wrap(~ID) + scale_y_log10(breaks = c(0.1, 1, 5, 10, 20, 30, 40)) ) #&gt; Joining, by = c(&quot;ID&quot;, &quot;TIME&quot;) print_plots(list_plots_rich) #&gt; [[1]] #&gt; NULL #&gt; #&gt; [[2]] #&gt; NULL #&gt; #&gt; [[3]] #&gt; NULL #&gt; #&gt; [[4]] #&gt; NULL #&gt; #&gt; [[5]] #&gt; NULL #&gt; #&gt; [[6]] #&gt; NULL #&gt; #&gt; [[7]] #&gt; NULL 5.7 Prepare for nonmem nm_dat_rich &lt;- sampled_data_rich2d %&gt;% select(ID, TIME, DV, OBSNUM) %&gt;% mutate( CMT = 1, EVID = 0 ) %&gt;% bind_rows(for_dosing) %&gt;% arrange(ID, TIME, desc(EVID)) *rich data kable(head(nm_dat_rich, n = 14)) ID TIME DV OBSNUM CMT EVID AMT RATE ADDL II 1 0 NA 0 1 1 1000 1000 1 12 1 2 28.0 1 1 0 NA NA NA NA 1 6 19.7 2 1 0 NA NA NA NA 1 11 14.9 3 1 0 NA NA NA NA 1 14 43.1 4 1 0 NA NA NA NA 1 18 20.7 5 1 0 NA NA NA NA 1 23 10.3 6 1 0 NA NA NA NA 2 0 NA 0 1 1 1000 1000 1 12 2 2 26.1 1 1 0 NA NA NA NA 2 6 28.3 2 1 0 NA NA NA NA 2 11 14.1 3 1 0 NA NA NA NA 2 14 46.5 4 1 0 NA NA NA NA 2 18 34.4 5 1 0 NA NA NA NA 2 23 20.1 6 1 0 NA NA NA NA 5.8 Create chains modt &lt;- read_file(&quot;../modeling/run007c.modt&quot;) BASE_MODEL_NUM &lt;- 7 scenario_df &lt;- as_data_frame( expand.grid(chain = 1:4, scenario = names(sparser_scenarios)) ) %&gt;% arrange(scenario) %&gt;% mutate(scenario_num = BASE_MODEL_NUM + as.numeric(as.factor(scenario))) by_row(scenario_df, function(row) { set.seed(1234567) ignore_obs &lt;- setdiff(1:length(sample_times_rich), sparser_scenarios[[row$scenario]]) ignore &lt;- paste0(&quot;IGNORE=(OBSNUM.EQN.&quot;, ignore_obs, &quot;)&quot;, collapse = &quot; &quot;) write_file( infuse(modt, chain_number = row$chain, seed = round(runif(1, 1000, 100000), 0), ignore = ignore, scenario = row$scenario), file.path(&quot;..&quot;, &quot;modeling&quot;, paste0(&quot;run&quot;, pad_left(row$scenario_num, 3), &quot;c&quot;, row$chain, &quot;.mod&quot;))) }) #&gt; # A tibble: 24 × 4 #&gt; chain scenario scenario_num .out #&gt; &lt;int&gt; &lt;fctr&gt; &lt;dbl&gt; &lt;list&gt; #&gt; 1 1 s2d 8 &lt;S3: character&gt; #&gt; 2 2 s2d 8 &lt;S3: character&gt; #&gt; 3 3 s2d 8 &lt;S3: character&gt; #&gt; 4 4 s2d 8 &lt;S3: character&gt; #&gt; 5 1 s1dpt 9 &lt;S3: character&gt; #&gt; 6 2 s1dpt 9 &lt;S3: character&gt; #&gt; # ... with 18 more rows 5.9 output data write_nonmem(nm_dat_rich, &quot;../modeling/mdata/simple_nocovar_56id_6tp_md.csv&quot;) session_details &lt;- devtools::session_info() session_details$platform #&gt; setting value #&gt; version R version 3.3.2 (2016-10-31) #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; tz America/New_York #&gt; date 2016-12-12 knitr::kable(session_details$packages) package * version date source backports 1.0.4 2016-10-24 CRAN (R 3.3.2) bookdown 0.2 2016-11-12 CRAN (R 3.3.2) devtools 1.12.0 2016-06-24 CRAN (R 3.3.2) digest 0.6.10 2016-08-02 CRAN (R 3.3.2) evaluate 0.10 2016-10-11 CRAN (R 3.3.2) htmltools 0.3.5 2016-03-21 CRAN (R 3.3.2) httpuv 1.3.3 2015-08-04 CRAN (R 3.3.2) knitr 1.15 2016-11-09 CRAN (R 3.3.2) magrittr 1.5 2014-11-22 CRAN (R 3.3.2) memoise 1.0.0 2016-01-29 CRAN (R 3.3.2) mime 0.5 2016-07-07 CRAN (R 3.3.2) miniUI 0.1.1 2016-01-15 CRAN (R 3.3.2) R6 2.2.0 2016-10-05 CRAN (R 3.3.2) Rcpp 0.12.8 2016-11-17 CRAN (R 3.3.2) rmarkdown 1.2 2016-11-21 CRAN (R 3.3.2) rprojroot 1.1 2016-10-29 CRAN (R 3.3.2) shiny 0.14.2 2016-11-01 CRAN (R 3.3.2) stringi 1.1.2 2016-10-01 CRAN (R 3.3.2) stringr 1.1.0 2016-08-19 CRAN (R 3.3.2) withr 1.0.2 2016-06-20 CRAN (R 3.3.2) xtable 1.8-2 2016-02-05 CRAN (R 3.3.2) yaml 2.1.13 2014-06-12 CRAN (R 3.3.2) "]
]
